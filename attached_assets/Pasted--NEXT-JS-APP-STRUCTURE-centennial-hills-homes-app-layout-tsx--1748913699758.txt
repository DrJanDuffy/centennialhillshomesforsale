// === NEXT.JS APP STRUCTURE ===
// centennial-hills-homes/
// ├── app/
// │   ├── layout.tsx
// │   ├── page.tsx
// │   ├── api/
// │   │   ├── mcp/
// │   │   │   └── [...method]/route.ts
// │   │   ├── search/route.ts
// │   │   ├── valuation/route.ts
// │   │   └── market/[zipCode]/route.ts
// │   ├── properties/
// │   │   ├── page.tsx
// │   │   └── [id]/page.tsx
// │   ├── neighborhoods/
// │   │   └── [name]/page.tsx
// │   └── market-insights/page.tsx
// ├── components/
// ├── lib/
// │   ├── mcp-server.ts
// │   └── mcp-client.ts
// └── public/

// === 1. NEXT.JS CONFIGURATION (next.config.js) ===
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverActions: true,
  },
  images: {
    domains: ['images.centennialhillshomes.com', 'api.mapbox.com'],
    formats: ['image/avif', 'image/webp'],
  },
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          {
            key: 'X-DNS-Prefetch-Control',
            value: 'on'
          },
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=63072000; includeSubDomains; preload'
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          },
          {
            key: 'Permissions-Policy',
            value: 'camera=(), microphone=(self), geolocation=(self)'
          }
        ]
      }
    ]
  },
  async rewrites() {
    return [
      {
        source: '/mcp/:path*',
        destination: 'http://localhost:8080/:path*', // MCP server
      }
    ]
  }
}

module.exports = nextConfig

// === 2. MCP SERVER IMPLEMENTATION (lib/mcp-server.ts) ===
import { MCPServer } from '@modelcontextprotocol/server-node';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { z } from 'zod';
import { prisma } from './prisma';
import { openai } from './openai';

export class CentennialHillsMCPServer {
  private server: MCPServer;

  constructor() {
    this.server = new MCPServer({
      name: 'centennial-hills-mcp',
      version: '1.0.0',
      capabilities: {
        tools: true,
        resources: true,
        prompts: true
      }
    });

    this.registerTools();
    this.registerResources();
    this.registerPrompts();
  }

  private registerTools() {
    // Advanced Property Search with AI
    this.server.setRequestHandler('tools/list', async () => ({
      tools: [
        {
          name: 'search_properties_ai',
          description: 'Search properties using natural language with AI understanding',
          inputSchema: {
            type: 'object',
            properties: {
              query: { type: 'string', description: 'Natural language search query' },
              filters: {
                type: 'object',
                properties: {
                  minPrice: { type: 'number' },
                  maxPrice: { type: 'number' },
                  bedrooms: { type: 'number' },
                  bathrooms: { type: 'number' },
                  sqftMin: { type: 'number' },
                  features: { type: 'array', items: { type: 'string' } },
                  schoolRating: { type: 'number' },
                  walkScore: { type: 'number' }
                }
              }
            },
            required: ['query']
          }
        },
        {
          name: 'instant_valuation',
          description: 'Get AI-powered instant home valuation',
          inputSchema: {
            type: 'object',
            properties: {
              address: { type: 'string' },
              propertyDetails: {
                type: 'object',
                properties: {
                  sqft: { type: 'number' },
                  bedrooms: { type: 'number' },
                  bathrooms: { type: 'number' },
                  lotSize: { type: 'number' },
                  yearBuilt: { type: 'number' },
                  recentUpgrades: { type: 'array', items: { type: 'string' } }
                }
              }
            },
            required: ['address']
          }
        },
        {
          name: 'market_forecast',
          description: 'AI-powered market predictions and investment insights',
          inputSchema: {
            type: 'object',
            properties: {
              neighborhood: { type: 'string' },
              timeframe: { type: 'string', enum: ['3months', '6months', '1year', '5years'] }
            }
          }
        },
        {
          name: 'lifestyle_match',
          description: 'Find properties matching lifestyle preferences',
          inputSchema: {
            type: 'object',
            properties: {
              lifestyle: {
                type: 'object',
                properties: {
                  workLocation: { type: 'string' },
                  commutePreference: { type: 'string' },
                  familySize: { type: 'number' },
                  hobbies: { type: 'array', items: { type: 'string' } },
                  petFriendly: { type: 'boolean' },
                  entertainmentPreferences: { type: 'array', items: { type: 'string' } }
                }
              }
            }
          }
        },
        {
          name: 'investment_analyzer',
          description: 'Analyze property investment potential',
          inputSchema: {
            type: 'object',
            properties: {
              propertyId: { type: 'string' },
              investmentGoals: {
                type: 'object',
                properties: {
                  strategy: { type: 'string', enum: ['rental', 'flip', 'long-term'] },
                  timeline: { type: 'string' },
                  budget: { type: 'number' }
                }
              }
            }
          }
        }
      ]
    }));

    // Tool implementations
    this.server.setRequestHandler('tools/call', async (request) => {
      const { name, arguments: args } = request.params;

      switch (name) {
        case 'search_properties_ai':
          return await this.searchPropertiesWithAI(args);
        case 'instant_valuation':
          return await this.getInstantValuation(args);
        case 'market_forecast':
          return await this.getMarketForecast(args);
        case 'lifestyle_match':
          return await this.findLifestyleMatches(args);
        case 'investment_analyzer':
          return await this.analyzeInvestment(args);
        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    });
  }

  private async searchPropertiesWithAI(args: any) {
    // Use OpenAI to parse natural language
    const aiParsed = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        {
          role: 'system',
          content: 'Parse real estate search queries into structured filters. Extract price ranges, bedrooms, features, and preferences.'
        },
        {
          role: 'user',
          content: args.query
        }
      ],
      functions: [{
        name: 'parse_search',
        parameters: {
          type: 'object',
          properties: {
            priceMin: { type: 'number' },
            priceMax: { type: 'number' },
            bedrooms: { type: 'number' },
            features: { type: 'array', items: { type: 'string' } },
            preferences: { type: 'array', items: { type: 'string' } }
          }
        }
      }],
      function_call: { name: 'parse_search' }
    });

    const parsed = JSON.parse(aiParsed.choices[0].message.function_call.arguments);
    
    // Search database with parsed filters
    const properties = await prisma.property.findMany({
      where: {
        price: {
          gte: parsed.priceMin || 0,
          lte: parsed.priceMax || 999999999
        },
        bedrooms: {
          gte: parsed.bedrooms || 0
        },
        status: 'active'
      },
      include: {
        images: true,
        features: true,
        neighborhood: true
      },
      take: 20
    });

    // AI ranking based on preferences
    const rankedProperties = await this.rankPropertiesByPreferences(properties, parsed.preferences);

    return {
      content: [{
        type: 'text',
        text: JSON.stringify({
          query: args.query,
          parsedFilters: parsed,
          totalResults: rankedProperties.length,
          properties: rankedProperties,
          aiInsights: await this.generateSearchInsights(rankedProperties, args.query)
        })
      }]
    };
  }

  private async getInstantValuation(args: any) {
    // Get comparable properties
    const comparables = await prisma.property.findMany({
      where: {
        status: 'sold',
        soldDate: {
          gte: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000) // Last 6 months
        },
        // Geographic proximity (simplified)
        neighborhood: {
          name: { contains: 'Centennial Hills' }
        }
      },
      orderBy: {
        soldDate: 'desc'
      },
      take: 10
    });

    // AI-powered valuation model
    const valuation = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        {
          role: 'system',
          content: 'You are a real estate valuation expert. Analyze comparable sales and property details to provide accurate home valuations.'
        },
        {
          role: 'user',
          content: JSON.stringify({
            subject: args,
            comparables: comparables
          })
        }
      ]
    });

    const estimate = JSON.parse(valuation.choices[0].message.content);

    return {
      content: [{
        type: 'text',
        text: JSON.stringify({
          address: args.address,
          valuation: {
            estimate: estimate.value,
            range: {
              low: estimate.value * 0.95,
              high: estimate.value * 1.05
            },
            confidence: estimate.confidence,
            comparables: comparables.slice(0, 5),
            factors: estimate.factors,
            lastUpdated: new Date().toISOString()
          }
        })
      }]
    };
  }

  private registerResources() {
    // Neighborhood data resource
    this.server.setRequestHandler('resources/list', async () => ({
      resources: [
        {
          uri: 'centennial-hills://neighborhoods/all',
          name: 'All Centennial Hills Neighborhoods',
          description: 'Comprehensive neighborhood data including demographics, amenities, and lifestyle',
          mimeType: 'application/json'
        },
        {
          uri: 'centennial-hills://schools/ratings',
          name: 'School Ratings and Information',
          description: 'Detailed school data for Centennial Hills area',
          mimeType: 'application/json'
        },
        {
          uri: 'centennial-hills://market/trends',
          name: 'Market Trends and Analytics',
          description: 'Real-time market data and historical trends',
          mimeType: 'application/json'
        }
      ]
    }));

    this.server.setRequestHandler('resources/read', async (request) => {
      const { uri } = request.params;

      switch (uri) {
        case 'centennial-hills://neighborhoods/all':
          return {
            contents: [{
              uri,
              mimeType: 'application/json',
              text: JSON.stringify(await this.getNeighborhoodData())
            }]
          };
        case 'centennial-hills://schools/ratings':
          return {
            contents: [{
              uri,
              mimeType: 'application/json',
              text: JSON.stringify(await this.getSchoolData())
            }]
          };
        case 'centennial-hills://market/trends':
          return {
            contents: [{
              uri,
              mimeType: 'application/json',
              text: JSON.stringify(await this.getMarketTrends())
            }]
          };
        default:
          throw new Error(`Unknown resource: ${uri}`);
      }
    });
  }

  private registerPrompts() {
    this.server.setRequestHandler('prompts/list', async () => ({
      prompts: [
        {
          name: 'buyer_journey',
          description: 'Personalized buyer journey guidance',
          arguments: [
            { name: 'stage', description: 'Current stage in buying process' },
            { name: 'preferences', description: 'Buyer preferences and requirements' }
          ]
        },
        {
          name: 'market_report',
          description: 'Generate comprehensive market report',
          arguments: [
            { name: 'neighborhood', description: 'Target neighborhood' },
            { name: 'reportType', description: 'Type of report needed' }
          ]
        }
      ]
    }));
  }

  async start() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.log('Centennial Hills MCP Server started');
  }
}

// === 3. NEXT.JS APP ROUTER LAYOUT (app/layout.tsx) ===
import type { Metadata, Viewport } from 'next'
import { Inter } from 'next/font/google'
import { Analytics } from '@vercel/analytics/react'
import { SpeedInsights } from '@vercel/speed-insights/next'
import './globals.css'
import { Providers } from './providers'
import { Navigation } from '@/components/Navigation'
import { Footer } from '@/components/Footer'
import { JsonLd } from '@/components/JsonLd'

const inter = Inter({ subsets: ['latin'] })

export const viewport: Viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 5,
  themeColor: '#1e40af',
}

export const metadata: Metadata = {
  metadataBase: new URL('https://www.centennialhillshomesforsale.com'),
  title: {
    default: 'Centennial Hills Homes For Sale | Dr. Jan Duffy REALTOR®',
    template: '%s | Centennial Hills Real Estate'
  },
  description: 'Find luxury homes in Centennial Hills, Las Vegas. Expert REALTOR® Dr. Jan Duffy offers AI-powered search, instant valuations, and market insights. Updated every 15 minutes.',
  keywords: ['Centennial Hills homes', 'Las Vegas real estate', 'luxury homes', 'Dr. Jan Duffy', 'Providence', 'Skye Canyon'],
  authors: [{ name: 'Dr. Jan Duffy', url: 'https://www.centennialhillshomesforsale.com' }],
  creator: 'Dr. Jan Duffy',
  publisher: 'Centennial Hills Homes For Sale',
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
  openGraph: {
    type: 'website',
    locale: 'en_US',
    url: 'https://www.centennialhillshomesforsale.com',
    siteName: 'Centennial Hills Homes For Sale',
    title: 'Centennial Hills Homes For Sale | Expert Real Estate',
    description: 'Discover luxury homes in Centennial Hills with Dr. Jan Duffy. AI-powered search, instant valuations, market insights.',
    images: [
      {
        url: '/images/og-image.jpg',
        width: 1200,
        height: 630,
        alt: 'Centennial Hills Luxury Homes',
      }
    ],
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Centennial Hills Homes For Sale',
    description: 'Find your dream home in Centennial Hills with expert REALTOR® Dr. Jan Duffy',
    images: ['/images/twitter-image.jpg'],
    creator: '@drjanduffy',
  },
  icons: {
    icon: [
      { url: '/favicon-16x16.png', sizes: '16x16', type: 'image/png' },
      { url: '/favicon-32x32.png', sizes: '32x32', type: 'image/png' },
    ],
    apple: '/apple-touch-icon.png',
    other: [
      {
        rel: 'mask-icon',
        url: '/safari-pinned-tab.svg',
        color: '#1e40af',
      },
    ],
  },
  manifest: '/manifest.json',
  alternates: {
    canonical: 'https://www.centennialhillshomesforsale.com',
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <JsonLd />
      </head>
      <body className={inter.className}>
        <Providers>
          <Navigation />
          <main className="min-h-screen">
            {children}
          </main>
          <Footer />
        </Providers>
        <Analytics />
        <SpeedInsights />
      </body>
    </html>
  )
}

// === 4. HOMEPAGE WITH MCP INTEGRATION (app/page.tsx) ===
import { Suspense } from 'react'
import dynamic from 'next/dynamic'
import { HeroSection } from '@/components/HeroSection'
import { PropertySearch } from '@/components/PropertySearch'
import { FeaturedProperties } from '@/components/FeaturedProperties'
import { MarketInsights } from '@/components/MarketInsights'
import { NeighborhoodExplorer } from '@/components/NeighborhoodExplorer'
import { TestimonialSlider } from '@/components/TestimonialSlider'
import { CTASection } from '@/components/CTASection'
import { getFeaturedProperties, getMarketStats } from '@/lib/api'

// Lazy load heavy components
const VirtualTour = dynamic(() => import('@/components/VirtualTour'), {
  loading: () => <div className="h-96 bg-gray-100 animate-pulse" />,
  ssr: false
})

const AIAssistant = dynamic(() => import('@/components/AIAssistant'), {
  loading: () => <div className="fixed bottom-4 right-4 w-16 h-16 bg-blue-600 rounded-full animate-pulse" />,
  ssr: false
})

export default async function HomePage() {
  // Server-side data fetching
  const [featuredProperties, marketStats] = await Promise.all([
    getFeaturedProperties(),
    getMarketStats()
  ])

  return (
    <>
      <HeroSection />
      
      <Suspense fallback={<div className="h-64 bg-gray-100 animate-pulse" />}>
        <PropertySearch />
      </Suspense>

      <FeaturedProperties properties={featuredProperties} />
      
      <MarketInsights stats={marketStats} />
      
      <NeighborhoodExplorer />
      
      <VirtualTour />
      
      <TestimonialSlider />
      
      <CTASection />
      
      <AIAssistant />
    </>
  )
}

// === 5. AI-POWERED PROPERTY SEARCH COMPONENT ===
'use client'

import { useState, useCallback, useTransition } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { motion, AnimatePresence } from 'framer-motion'
import { MagnifyingGlassIcon, MicrophoneIcon, AdjustmentsHorizontalIcon } from '@heroicons/react/24/outline'
import { searchProperties } from '@/app/actions'
import { PropertyCard } from '@/components/PropertyCard'
import { useVoiceSearch } from '@/hooks/useVoiceSearch'
import { useMCPClient } from '@/hooks/useMCPClient'

export function PropertySearch() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [query, setQuery] = useState(searchParams.get('q') || '')
  const [filters, setFilters] = useState({})
  const [results, setResults] = useState([])
  const [aiInsights, setAIInsights] = useState(null)
  const [isPending, startTransition] = useTransition()
  const { isListening, startListening } = useVoiceSearch(setQuery)
  const mcpClient = useMCPClient()

  const handleSearch = useCallback(async () => {
    startTransition(async () => {
      try {
        // Use MCP for AI-powered search
        const response = await mcpClient.callTool('search_properties_ai', {
          query,
          filters
        })
        
        const data = JSON.parse(response.content[0].text)
        setResults(data.properties)
        setAIInsights(data.aiInsights)
        
        // Update URL
        const params = new URLSearchParams(searchParams)
        params.set('q', query)
        router.push(`/?${params.toString()}`, { scroll: false })
      } catch (error) {
        console.error('Search failed:', error)
      }
    })
  }, [query, filters, mcpClient, router, searchParams])

  const smartFilters = [
    { id: 'pool', icon: '🏊', label: 'Pool', value: { features: ['pool'] } },
    { id: 'schools', icon: '🎓', label: 'Top Schools', value: { schoolRating: 8 } },
    { id: 'golf', icon: '⛳', label: 'Golf View', value: { features: ['golf-view'] } },
    { id: 'new', icon: '✨', label: 'New Build', value: { yearBuilt: new Date().getFullYear() } },
    { id: 'luxury', icon: '💎', label: 'Luxury', value: { minPrice: 800000 } },
    { id: 'walkable', icon: '🚶', label: 'Walkable', value: { walkScore: 70 } }
  ]

  return (
    <section className="py-16 bg-gradient-to-b from-gray-50 to-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Search Header */}
        <div className="text-center mb-12">
          <motion.h2 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-4xl font-bold text-gray-900 mb-4"
          >
            Find Your Dream Home in Centennial Hills
          </motion.h2>
          <p className="text-xl text-gray-600">
            AI-powered search understands what you're looking for
          </p>
        </div>

        {/* Search Bar */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="max-w-4xl mx-auto mb-8"
        >
          <div className="relative group">
            <input
              type="text"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
              placeholder="Try: '3 bedroom home with pool near top schools under $700k'"
              className="w-full px-6 py-4 pr-32 text-lg rounded-full border-2 border-gray-200 focus:border-blue-500 focus:outline-none transition-all duration-200 shadow-lg group-hover:shadow-xl"
            />
            <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-2">
              <button
                onClick={startListening}
                className={`p-3 rounded-full transition-all ${
                  isListening 
                    ? 'bg-red-500 text-white animate-pulse' 
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
                aria-label="Voice search"
              >
                <MicrophoneIcon className="w-5 h-5" />
              </button>
              <button
                onClick={handleSearch}
                disabled={isPending}
                className="px-6 py-3 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors disabled:opacity-50"
              >
                {isPending ? (
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                ) : (
                  <MagnifyingGlassIcon className="w-5 h-5" />
                )}
              </button>
            </div>
          </div>
        </motion.div>

        {/* Smart Filters */}
        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
          className="flex flex-wrap justify-center gap-3 mb-12"
        >
          {smartFilters.map((filter) => (
            <button
              key={filter.id}
              onClick={() => {
                setFilters(prev => ({ ...prev, ...filter.value }))
                handleSearch()
              }}
              className="px-5 py-2.5 bg-white rounded-full shadow-md hover:shadow-lg transition-all duration-200 flex items-center gap-2 border border-gray-100"
            >
              <span className="text-xl">{filter.icon}</span>
              <span className="font-medium text-gray-700">{filter.label}</span>
            </button>
          ))}
        </motion.div>

        {/* AI Insights */}
        <AnimatePresence>
          {aiInsights && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="max-w-4xl mx-auto mb-8"
            >
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200">
                <div className="flex items-start gap-4">
                  <div className="flex-shrink-0 w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center text-white">
                    🤖
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">AI Insights</h3>
                    <p className="text-gray-700">{aiInsights}</p>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Results Grid */}
        <AnimatePresence mode="popLayout">
          {results.length > 0 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"
            >
              {results.map((property, index) => (
                <motion.div
                  key={property.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.05 }}
                >
                  <PropertyCard property={property} />
                </motion.div>
              ))}
            </motion.div>
          )}
        </AnimatePresence>

        {/* Loading State */}
        {isPending && (
          <div className="flex justify-center py-12">
            <div className="flex flex-col items-center gap-4">
              <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin" />
              <p className="text-gray-600 animate-pulse">AI is searching for your perfect home...</p>
            </div>
          </div>
        )}
      </div>
    </section>
  )
}

// === 6. SERVER ACTIONS (app/actions.ts) ===
'use server'

import { revalidatePath } from 'next/cache'
import { mcpClient } from '@/lib/mcp-client'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'

const SearchSchema = z.object({
  query: z.string(),
  filters: z.object({
    minPrice: z.number().optional(),
    maxPrice: z.number().optional(),
    bedrooms: z.number().optional(),
    bathrooms: z.number().optional(),
    features: z.array(z.string()).optional(),
  }).optional()
})

export async function searchProperties(input: z.infer<typeof SearchSchema>) {
  try {
    const validated = SearchSchema.parse(input)
    
    // Use MCP for AI-powered search
    const result = await mcpClient.callTool('search_properties_ai', validated)
    
    // Log search for analytics
    await prisma.searchLog.create({
      data: {
        query: validated.query,
        filters: validated.filters,
        resultsCount: result.properties.length,
        timestamp: new Date()
      }
    })
    
    return result
  } catch (error) {
    console.error('Search error:', error)
    throw new Error('Failed to search properties')
  }
}

export async function getInstantValuation(address: string, details?: any) {
  try {
    const result = await mcpClient.callTool('instant_valuation', {
      address,
      propertyDetails: details
    })
    
    revalidatePath('/valuation')
    return result
  } catch (error) {
    console.error('Valuation error:', error)
    throw new Error('Failed to get valuation')
  }
}

export async function subscribeToAlerts(email: string, preferences: any) {
  try {
    await prisma.alertSubscription.create({
      data: {
        email,
        preferences,
        active: true
      }
    })
    
    // Send welcome email
    await sendWelcomeEmail(email)
    
    return { success: true }
  } catch (error) {
    console.error('Subscription error:', error)
    throw new Error('Failed to subscribe')
  }
}

// === 7. API ROUTES (app/api/mcp/[...method]/route.ts) ===
import { NextRequest, NextResponse } from 'next/server'
import { mcpClient } from '@/lib/mcp-client'
import { auth } from '@/lib/auth'
import { rateLimit } from '@/lib/rate-limit'

export async function POST(
  request: NextRequest,
  { params }: { params: { method: string[] } }
) {
  try {
    // Rate limiting
    const identifier = request.ip ?? 'anonymous'
    const { success } = await rateLimit.limit(identifier)
    
    if (!success) {
      return NextResponse.json(
        { error: 'Too many requests' },
        { status: 429 }
      )
    }

    // Optional authentication for certain endpoints
    const session = await auth()
    const method = params.method.join('/')
    
    // Parse request body
    const body = await request.json()
    
    // Call MCP server
    let result
    switch (method) {
      case 'tools/call':
        result = await mcpClient.callTool(body.tool, body.arguments)
        break
      case 'resources/read':
        result = await mcpClient.readResource(body.uri)
        break
      case 'prompts/generate':
        result = await mcpClient.generatePrompt(body.prompt, body.arguments)
        break
      default:
        return NextResponse.json(
          { error: 'Invalid method' },
          { status: 400 }
        )
    }
    
    return NextResponse.json(result)
  } catch (error) {
    console.error('MCP API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// === 8. EDGE MIDDLEWARE (middleware.ts) ===
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Security headers
  const headers = new Headers(request.headers)
  headers.set('X-Frame-Options', 'DENY')
  headers.set('X-Content-Type-Options', 'nosniff')
  headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  headers.set('X-XSS-Protection', '1; mode=block')
  
  // Content Security Policy
  const csp = [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com",
    "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
    "font-src 'self' https://fonts.gstatic.com",
    "img-src 'self' data: https: blob:",
    "connect-src 'self' https://api.mapbox.com wss://localhost:* https://vitals.vercel-insights.com",
    "frame-src 'self' https://www.youtube.com",
    "media-src 'self' https://stream.mux.com"
  ].join('; ')
  
  headers.set('Content-Security-Policy', csp)
  
  // Redirect www to non-www
  const host = request.headers.get('host')
  if (host?.startsWith('www.')) {
    return NextResponse.redirect(
      new URL(request.url.replace('://www.', '://'), request.url)
    )
  }
  
  // Add cache headers for static assets
  if (request.nextUrl.pathname.match(/\.(jpg|jpeg|png|gif|ico|css|js|woff2?)$/)) {
    headers.set('Cache-Control', 'public, max-age=31536000, immutable')
  }
  
  return NextResponse.next({
    headers
  })
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}

// === 9. PRISMA SCHEMA (prisma/schema.prisma) ===
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Property {
  id            String    @id @default(cuid())
  mlsNumber     String    @unique
  address       String
  price         Int
  bedrooms      Int
  bathrooms     Float
  sqft          Int
  lotSize       Int?
  yearBuilt     Int
  description   String    @db.Text
  status        String    @default("active")
  listDate      DateTime  @default(now())
  soldDate      DateTime?
  
  images        PropertyImage[]
  features      PropertyFeature[]
  neighborhood  Neighborhood    @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId String
  
  views         Int       @default(0)
  favorites     Favorite[]
  showings      Showing[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([price, bedrooms, status])
  @@index([neighborhoodId])
  @@index([listDate])
}

model PropertyImage {
  id          String   @id @default(cuid())
  url         String
  alt         String?
  order       Int      @default(0)
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  
  @@index([propertyId])
}

model PropertyFeature {
  id          String     @id @default(cuid())
  name        String
  category    String
  properties  Property[]
  
  @@unique([name, category])
}

model Neighborhood {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String     @db.Text
  
  properties  Property[]
  schools     School[]
  
  demographics Json?
  amenities    Json?
  statistics   Json?
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model School {
  id             String        @id @default(cuid())
  name           String
  type           String        // elementary, middle, high
  rating         Int
  neighborhood   Neighborhood  @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId String
  
  @@index([neighborhoodId])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          String    @default("user")
  
  favorites     Favorite[]
  showings      Showing[]
  searches      SearchLog[]
  alerts        AlertSubscription[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Favorite {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  createdAt  DateTime @default(now())
  
  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

model Showing {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  date       DateTime
  status     String   @default("scheduled")
  notes      String?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([userId])
  @@index([propertyId])
  @@index([date])
}

model SearchLog {
  id           String   @id @default(cuid())
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
  query        String
  filters      Json?
  resultsCount Int
  timestamp    DateTime @default(now())
  
  @@index([userId])
  @@index([timestamp])
}

model AlertSubscription {
  id          String   @id @default(cuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  email       String
  preferences Json
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  @@index([email])
  @@index([active])
}

// === 10. PACKAGE.JSON ===
{
  "name": "centennial-hills-homes",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "mcp:start": "node --loader ts-node/esm lib/mcp-server.ts",
    "db:push": "prisma db push",
    "db:migrate": "prisma migrate dev",
    "db:studio": "prisma studio",
    "postinstall": "prisma generate"
  },
  "dependencies": {
    "@headlessui/react": "^1.7.18",
    "@heroicons/react": "^2.1.1",
    "@modelcontextprotocol/sdk": "^0.5.0",
    "@modelcontextprotocol/server-node": "^0.5.0",
    "@next/third-parties": "^14.1.0",
    "@prisma/client": "^5.10.0",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-tabs": "^1.0.4",
    "@tanstack/react-query": "^5.20.0",
    "@vercel/analytics": "^1.1.2",
    "@vercel/speed-insights": "^1.0.10",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "framer-motion": "^11.0.3",
    "mapbox-gl": "^3.1.2",
    "next": "14.1.0",
    "next-auth": "^5.0.0-beta.5",
    "openai": "^4.26.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.49.3",
    "recharts": "^2.12.0",
    "sharp": "^0.33.2",
    "tailwind-merge": "^2.2.1",
    "zod": "^3.22.4",
    "zustand": "^4.5.0"
  },
  "devDependencies": {
    "@types/mapbox-gl": "^3.1.0",
    "@types/node": "^20.11.17",
    "@types/react": "^18.2.55",
    "@types/react-dom": "^18.2.19",
    "autoprefixer": "^10.4.17",
    "eslint": "^8.57.0",
    "eslint-config-next": "14.1.0",
    "postcss": "^8.4.35",
    "prisma": "^5.10.0",
    "tailwindcss": "^3.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3"
  }
}