// components/AwesomeHero.tsx
import React, { useState, useEffect } from 'react';
import { useMCPClient } from '@/hooks/useMCPClient';
import { useVoiceSearch } from '@/hooks/useVoiceSearch';

// Import icons with fallback
let MagnifyingGlassIcon, MicrophoneIcon, StopIcon, HomeIcon, ChevronLeftIcon, ChevronRightIcon;

try {
  const icons = require('@heroicons/react/24/outline');
  MagnifyingGlassIcon = icons.MagnifyingGlassIcon;
  MicrophoneIcon = icons.MicrophoneIcon;
  StopIcon = icons.StopIcon;
  HomeIcon = icons.HomeIcon;
  ChevronLeftIcon = icons.ChevronLeftIcon;
  ChevronRightIcon = icons.ChevronRightIcon;
} catch (e) {
  // Fallback SVG icons
  MagnifyingGlassIcon = ({ className }: { className?: string }) => (
    <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
  );
  
  MicrophoneIcon = ({ className }: { className?: string }) => (
    <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
    </svg>
  );
  
  StopIcon = ({ className }: { className?: string }) => (
    <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z" />
    </svg>
  );
  
  HomeIcon = ({ className }: { className?: string }) => (
    <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
    </svg>
  );
  
  ChevronLeftIcon = ({ className }: { className?: string }) => (
    <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
    </svg>
  );
  
  ChevronRightIcon = ({ className }: { className?: string }) => (
    <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
    </svg>
  );
}

const AwesomeHero: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [currentSlide, setCurrentSlide] = useState(0);
  
  // Use the updated hook with correct property names
  const { searchProperties, isLoading, properties, isConnected } = useMCPClient();
  const { isListening, startListening, stopListening, isSupported } = useVoiceSearch(setSearchQuery, {
    onResult: (transcript) => setSearchQuery(transcript),
    continuous: false,
    interimResults: true
  });

  // Hero background images
  const heroImages = [
    '/api/placeholder/1920/1080?text=Luxury+Homes+in+Las+Vegas',
    '/api/placeholder/1920/1080?text=Modern+Living+Spaces',
    '/api/placeholder/1920/1080?text=Dream+Home+Awaits'
  ];

  // Auto-rotate slides
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % heroImages.length);
    }, 5000);
    
    return () => clearInterval(timer);
  }, [heroImages.length]);

  const handleSearch = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!searchQuery.trim() || !isConnected) return;
    
    try {
      await searchProperties(searchQuery);
    } catch (error) {
      console.error('Search failed:', error);
    }
  };

  const handleVoiceToggle = () => {
    if (isListening) {
      stopListening();
    } else {
      startListening();
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(price);
  };

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % heroImages.length);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + heroImages.length) % heroImages.length);
  };

  return (
    <div className="relative min-h-screen overflow-hidden">
      {/* Background Slider */}
      <div className="absolute inset-0 w-full h-full">
        {heroImages.map((image, index) => (
          <div
            key={index}
            className={`absolute inset-0 w-full h-full transition-opacity duration-1000 ${
              index === currentSlide ? 'opacity-100' : 'opacity-0'
            }`}
          >
            <img
              src={image}
              alt={`Hero ${index + 1}`}
              className="w-full h-full object-cover"
            />
            <div className="absolute inset-0 bg-black bg-opacity-40"></div>
          </div>
        ))}
      </div>

      {/* Slide Navigation */}
      <button
        onClick={prevSlide}
        className="absolute left-4 top-1/2 transform -translate-y-1/2 z-10 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-full p-2 transition-all"
        aria-label="Previous slide"
      >
        <ChevronLeftIcon className="h-6 w-6 text-white" />
      </button>
      
      <button
        onClick={nextSlide}
        className="absolute right-4 top-1/2 transform -translate-y-1/2 z-10 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-full p-2 transition-all"
        aria-label="Next slide"
      >
        <ChevronRightIcon className="h-6 w-6 text-white" />
      </button>

      {/* Slide Indicators */}
      <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-10 flex space-x-2">
        {heroImages.map((_, index) => (
          <button
            key={index}
            onClick={() => setCurrentSlide(index)}
            className={`w-3 h-3 rounded-full transition-all ${
              index === currentSlide 
                ? 'bg-white' 
                : 'bg-white bg-opacity-50 hover:bg-opacity-75'
            }`}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>

      {/* Content Overlay */}
      <div className="relative z-10 flex flex-col items-center justify-center min-h-screen px-4 text-center text-white">
        <div className="max-w-4xl mx-auto">
          {/* Main Heading */}
          <div className="flex items-center justify-center mb-6">
            <HomeIcon className="h-12 w-12 text-blue-400 mr-4" />
            <h1 className="text-5xl md:text-7xl font-bold">
              Find Your
              <span className="block text-blue-400">Dream Home</span>
            </h1>
          </div>
          
          <p className="text-xl md:text-2xl mb-8 opacity-90 max-w-2xl mx-auto">
            Discover luxury homes in Centennial Hills, Las Vegas. Your perfect home awaits with stunning views and modern amenities.
          </p>

          {/* Search Form */}
          <form onSubmit={handleSearch} className="max-w-2xl mx-auto mb-8">
            <div className="flex items-center bg-white rounded-lg p-2 shadow-2xl">
              <div className="flex-1 relative">
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Search by location, price, or features..."
                  className="w-full px-4 py-3 text-gray-900 bg-transparent focus:outline-none text-lg"
                  disabled={isLoading || !isConnected}
                />
              </div>
              
              {isSupported && (
                <button
                  type="button"
                  onClick={handleVoiceToggle}
                  className={`p-3 rounded-lg mr-2 transition-colors ${
                    isListening 
                      ? 'bg-red-500 text-white' 
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                  title={isListening ? 'Stop voice input' : 'Start voice input'}
                >
                  {isListening ? (
                    <StopIcon className="h-5 w-5" />
                  ) : (
                    <MicrophoneIcon className="h-5 w-5" />
                  )}
                </button>
              )}
              
              <button
                type="submit"
                disabled={!searchQuery.trim() || isLoading || !isConnected}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center"
              >
                {isLoading ? (
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                ) : (
                  <MagnifyingGlassIcon className="h-5 w-5 mr-2" />
                )}
                {isLoading ? 'Searching...' : 'Search'}
              </button>
            </div>
            
            {!isConnected && (
              <p className="text-yellow-300 text-sm mt-2">
                Connecting to search service...
              </p>
            )}
          </form>

          {/* Quick Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto">
            <div className="bg-white bg-opacity-10 backdrop-blur-sm rounded-lg p-6">
              <h3 className="text-3xl font-bold text-blue-400">500+</h3>
              <p className="text-lg">Properties Available</p>
            </div>
            <div className="bg-white bg-opacity-10 backdrop-blur-sm rounded-lg p-6">
              <h3 className="text-3xl font-bold text-blue-400">15+</h3>
              <p className="text-lg">Years Experience</p>
            </div>
            <div className="bg-white bg-opacity-10 backdrop-blur-sm rounded-lg p-6">
              <h3 className="text-3xl font-bold text-blue-400">1000+</h3>
              <p className="text-lg">Happy Families</p>
            </div>
          </div>
        </div>
      </div>

      {/* Search Results Preview */}
      {properties.length > 0 && (
        <div className="absolute bottom-0 left-0 right-0 z-10 bg-white bg-opacity-95 backdrop-blur-sm p-6">
          <div className="max-w-6xl mx-auto">
            <h3 className="text-xl font-semibold text-gray-900 mb-4">
              Found {properties.length} Properties
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {properties.slice(0, 3).map((property) => (
                <div key={property.id} className="bg-white rounded-lg shadow-lg overflow-hidden">
                  <img
                    src={property.imageUrl}
                    alt={property.title}
                    className="w-full h-32 object-cover"
                  />
                  <div className="p-4">
                    <h4 className="font-semibold text-gray-900 truncate">
                      {property.title}
                    </h4>
                    <p className="text-blue-600 font-bold text-lg">
                      {formatPrice(property.price)}
                    </p>
                    <p className="text-gray-600 text-sm">
                      {property.bedrooms} bed • {property.bathrooms} bath • {property.sqft.toLocaleString()} sqft
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AwesomeHero;