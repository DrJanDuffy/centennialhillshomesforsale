I'll help you resolve these deployment failures with a systematic approach. The core issue is a missing package dependency blocking your static site generation.
Immediate Action Plan
Step 1: Remove Problematic Package
Edit package.json:
json{
  "dependencies": {
    // Remove this line:
    // "speech-recognition-polyfill": "^0.4.1"
  }
}
Step 2: Update Voice Search Implementation
Replace polyfill-dependent code in hooks/useVoiceSearch.ts:
typescriptimport { useState, useEffect, useCallback } from 'react';

interface UseVoiceSearchOptions {
  onResult?: (transcript: string) => void;
  onError?: (error: string) => void;
  continuous?: boolean;
  interimResults?: boolean;
}

export const useVoiceSearch = ({
  onResult,
  onError,
  continuous = false,
  interimResults = true
}: UseVoiceSearchOptions = {}) => {
  const [isListening, setIsListening] = useState(false);
  const [isSupported, setIsSupported] = useState(false);
  const [recognition, setRecognition] = useState<SpeechRecognition | null>(null);

  useEffect(() => {
    // Check for native browser support
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    
    if (SpeechRecognition) {
      setIsSupported(true);
      const recognitionInstance = new SpeechRecognition();
      
      recognitionInstance.continuous = continuous;
      recognitionInstance.interimResults = interimResults;
      recognitionInstance.lang = 'en-US';

      recognitionInstance.onresult = (event) => {
        const transcript = Array.from(event.results)
          .map(result => result[0].transcript)
          .join('');
        
        onResult?.(transcript);
      };

      recognitionInstance.onerror = (event) => {
        onError?.(event.error);
        setIsListening(false);
      };

      recognitionInstance.onend = () => {
        setIsListening(false);
      };

      setRecognition(recognitionInstance);
    } else {
      setIsSupported(false);
      onError?.('Speech recognition not supported in this browser');
    }
  }, [continuous, interimResults, onResult, onError]);

  const startListening = useCallback(() => {
    if (recognition && !isListening) {
      recognition.start();
      setIsListening(true);
    }
  }, [recognition, isListening]);

  const stopListening = useCallback(() => {
    if (recognition && isListening) {
      recognition.stop();
      setIsListening(false);
    }
  }, [recognition, isListening]);

  return {
    isListening,
    isSupported,
    startListening,
    stopListening
  };
};
Step 3: Fix Next.js Static Export Configuration
Update package.json build scripts:
json{
  "scripts": {
    "build": "next build",
    "build-static": "next build && next export",
    "start": "next start"
  }
}
Update next.config.js for static export:
javascript/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  trailingSlash: true,
  images: {
    unoptimized: true
  },
  // Disable server-side features for static export
  experimental: {
    esmExternals: false
  }
}

module.exports = nextConfig
Type Definitions for Speech Recognition
Add to types/speech-recognition.d.ts:
typescriptinterface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  start(): void;
  stop(): void;
  abort(): void;
  onresult: (event: SpeechRecognitionEvent) => void;
  onerror: (event: SpeechRecognitionErrorEvent) => void;
  onend: () => void;
}

interface SpeechRecognitionEvent {
  results: SpeechRecognitionResultList;
}

interface SpeechRecognitionErrorEvent {
  error: string;
}

interface Window {
  SpeechRecognition: typeof SpeechRecognition;
  webkitSpeechRecognition: typeof SpeechRecognition;
}
Deployment Recovery Steps
bash# 1. Clean dependencies
rm -rf node_modules package-lock.json

# 2. Install with updated package.json
npm install

# 3. Test build locally
npm run build-static

# 4. Verify static files generated
ls -la out/  # or dist/ depending on configuration
Success Validation Checklist
Build should succeed when:

✅ No missing package errors during npm install
✅ npm run build-static completes without errors
✅ Static files generated in output directory
✅ Voice search functionality works with native API

Fallback Strategy for Voice Search
If you need broader browser support, implement a graceful degradation:
typescript// Component usage example
const VoiceSearchButton = () => {
  const { isSupported, isListening, startListening, stopListening } = useVoiceSearch({
    onResult: (transcript) => {
      console.log('Voice input:', transcript);
      // Handle search logic
    },
    onError: (error) => {
      console.warn('Voice search error:', error);
      // Show manual input fallback
    }
  });

  if (!isSupported) {
    return (
      <input 
        type="text" 
        placeholder="Voice search not supported - type here"
        className="fallback-search-input"
      />
    );
  }

  return (
    <button 
      onClick={isListening ? stopListening : startListening}
      className={`voice-btn ${isListening ? 'listening' : ''}`}
    >
      {isListening ? '🔴 Stop' : '🎤 Voice Search'}
    </button>
  );
};
Browser Compatibility Matrix
BrowserNative SupportPolyfill NeededChrome 25+✅ Yes❌ NoFirefox❌ Limited✅ YesSafari 14.1+✅ Yes❌ NoEdge 79+✅ Yes❌ No
Try these fixes and let me know if you encounter any specific errors during the build process. The native Web Speech API approach should resolve both the missing package issue and provide better performance than a polyfill.