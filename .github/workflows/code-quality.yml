name: Code Quality & Performance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  CACHE_DEPENDENCIES: true

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        if: env.CACHE_DEPENDENCIES
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest

      - name: Run Biome check
        run: biome ci .

      - name: Run Biome format check
        run: biome format --check .

      - name: Type check
        run: npm run type-check

      - name: Run tests (if available)
        run: npm test --if-present

  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run bundle analysis
        run: npm run bundle:analyze
        continue-on-error: true

      - name: Run image optimization analysis
        run: npm run images:optimize
        continue-on-error: true

      - name: Generate performance report
        run: |
          echo "## ðŸ“Š Performance Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle size analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- Check .next/analyze/ for detailed reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Optimization" >> $GITHUB_STEP_SUMMARY
          echo "- Image analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- Check image-optimization-report.json for details" >> $GITHUB_STEP_SUMMARY

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Biome security checks
        run: biome check . --apply-unsafe
        continue-on-error: true

      - name: Generate security report
        run: |
          echo "## ðŸ”’ Security Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Checks" >> $GITHUB_STEP_SUMMARY
          echo "- NPM audit completed" >> $GITHUB_STEP_SUMMARY
          echo "- Biome security analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- Check logs for any security issues" >> $GITHUB_STEP_SUMMARY

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality, performance, security]
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod=false'

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('ðŸš€ Preview Deployment'));
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸš€ **Preview Deployment Ready!**
                
                **Preview URL:** ${process.env.VERCEL_URL}
                **Branch:** ${context.payload.pull_request.head.ref}
                
                **Quality Checks:** âœ… Passed
                **Performance:** âœ… Analyzed
                **Security:** âœ… Audited
                
                ---
                *This comment will be updated on each deployment*`
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸš€ **Preview Deployment Ready!**
                
                **Preview URL:** ${process.env.VERCEL_URL}
                **Branch:** ${context.payload.pull_request.head.ref}
                
                **Quality Checks:** âœ… Passed
                **Performance:** âœ… Analyzed
                **Security:** âœ… Audited
                
                ---
                *This comment will be updated on each deployment*`
              });
            }
        env:
          VERCEL_URL: ${{ steps.deploy.outputs.preview-url }}

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [quality, performance, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Notify deployment success
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "URL: ${{ steps.deploy.outputs.url }}"
